import NextAuth, { NextAuthOptions } from "next-auth";
import GithubProvider from "next-auth/providers/github";
import CredentialsProvider from "next-auth/providers/credentials";
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import { NextApiHandler } from "next";
import prisma from '@/libs/prisma';

const options: NextAuthOptions = {
  debug: true,
  adapter: PrismaAdapter(prisma),
  session: {
    strategy: "jwt",
    maxAge: 10 * 60, // second
  },
  jwt: {
    maxAge: 10 * 60, // second, defaults to session.maxAge
  },
  pages: {
    signIn: "/login",
  },
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_CLIENT_ID,
      clientSecret: process.env.GITHUB_CLIENT_SECRET,
    }),
    CredentialsProvider({
      id: 'Credentials',
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      authorize: async (credentials, req) => {
        try {
        //   const response = await POST('/auth/login', {
        //     email: credentials?.email,
        //     password: credentials?.password,
        //   })

        //   const response_user = await GET('/me', undefined, {
        //     headers: { Authorization: `Bearer ${response.data.accessToken}` },
        //   })
          
        //   // 登录成功后需要return你需要存储在 cookie 当中的数据
        //   if (response_user.data)
        //     return {
        //       ...response_user.data,
        //       accessToken: response.data.accessToken,
        //       refreshToken: response.data.refreshToken,
        //       accessTokenExpires: response.data.expiresIn,
        //     }

          return null
        } catch (error) {
          return null
        }
      },
    }),
  ],
  callbacks: {
    // 登录成功后jwt回调，user中取得数据，在调用signIn才会有值，之后是在cookie中读取
    async jwt({ token, user, account, profile, isNewUser }) {
      return token;
    },
    /** 调用getSession，useSession触发，此处将token存入user中 */
    session: async ({ session, token, user }) => {
      if (session?.user && token) {
        session.user.id = token.id;
      }
      return session;
    },
  },
};

const authHandler: NextApiHandler = (req, res) => NextAuth(req, res, options);

export default authHandler;
